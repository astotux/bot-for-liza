require('dotenv').config()
const { Bot, GrammyError, HttpError, Keyboard, InlineKeyboard, session, InputMediaBuilder, InputFile } = require('grammy')
const { hydrate } = require('@grammyjs/hydrate')
const sqlite3 = require('sqlite3').verbose()

// connct to sqlite3 db
const db = new sqlite3.Database('db/database.db', sqlite3.OPEN_READWRITE, (err) => {
    if (err) return console.error(err.message)
})

const bot = new Bot(process.env.BOT_TOKEN)
const adm_id_num = process.env.ADM

function initial() {
    return { slideCount: 1, categories: [], lessons: [], title: '', description: '', photo: '', link_name: '', link: '', file: '', category_id: '' };
}
bot.use(session({ initial }));
bot.use(hydrate())



// CRUD db
const getAllUsers = (callback) => {
    let sql = 'SELECT * FROM users'
    db.all(sql, [], callback)
}
const getAllUsersCount = (callback) => {
    let sql = 'SELECT count(id) AS ap FROM users'
    db.all(sql, [], callback)
}
const getOneUser = (id, callback) => {
    let sql = 'SELECT * FROM users WHERE id_user = ?'
    db.get(sql, [id], callback)
}
const getAllCategories = (callback) => {
    let sql = 'SELECT * FROM categories'
    db.all(sql, [], callback)
}
const getAllLessons = (callback) => {
    let sql = 'SELECT * FROM lessons'
    db.all(sql, [], callback)
}
const getOneCategory = (id, callback) => {
    let sql = 'SELECT * FROM categories WHERE id = ?'
    db.get(sql, [id], callback)
}
const getAllLessonsByCategory = (id, callback) => {
    let sql = 'SELECT * FROM lessons WHERE category_id = ?'
    db.all(sql, [id], callback)
}
const getOneLesson = (id, callback) => {
    let sql = 'SELECT * FROM lessons WHERE id = ?'
    db.get(sql, [id], callback)
}


function getKeyByValue(object, value) {
    return Object.keys(object).find(key => object[key] === value);
}

const adminFunc = async (ctx) => {
    const adminKeyboard = new InlineKeyboard()
    if (ctx.session.link_name.length > 0 && ctx.session.link.length > 0) {
        adminKeyboard.url(ctx.session.link_name, ctx.session.link).row()
    }
    if (ctx.session.photo.length > 0 && ctx.session.title.length > 0 && ctx.session.description.length > 0) {
        if (ctx.session.link_name.length > 0 && ctx.session.link.length > 0) {
            adminKeyboard.text('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º üì®', 'admin_send').row()
        }
        adminKeyboard.text('–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚úÖ', 'admin_category').row().text('–î–æ–±–∞–≤–∏—Ç—å –≤ —É—Ä–æ–∫ ‚úÖ', 'admin_lesson').row()
        
    }
    if (ctx.session.photo.length > 0 || ctx.session.title.length > 0 || ctx.session.description.length > 0 || (ctx.session.link_name.length > 0 && ctx.session.link.length > 0)) {
        adminKeyboard.text('–û–∏—á—Å—Ç–∏—Ç—å ‚ôªÔ∏è', 'admin_clear')
    }
    if (ctx.session.photo.length > 0) {
        await ctx.replyWithPhoto(ctx.session.photo, {
            caption: `<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b>\n${ctx.session.title}\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n${ctx.session.description.replace('$', '\n').replace('~', '\n\n')}\n\n<b>–§–∞–π–ª:</b>${ctx.session.file.length <= 0 ? '\n–ë–µ–∑ —Ñ–∞–π–ª–∞' : '–° —Ñ–∞–π–ª–æ–º'}\n\n${ctx.session.link_name.length > 0 && ctx.session.link.length > 0 ? '<b>–°—Å—ã–ª–∫–∞:</b>' : ''}`,
            parse_mode: 'HTML',
            reply_markup: adminKeyboard
        })
        if (ctx.session.file.length > 0) {
            await ctx.replyWithDocument(ctx.session.file)
        }
    } else {
        await ctx.reply(`<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b>\n${ctx.session.title}\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n${ctx.session.description.replace('$', '\n').replace('~', '\n\n')}\n\n<b>–§–∞–π–ª:</b>${ctx.session.file.length <= 0 ? '\n–ë–µ–∑ —Ñ–∞–π–ª–∞' : '–° —Ñ–∞–π–ª–æ–º'}\n\n${ctx.session.link_name.length > 0 && ctx.session.link.length > 0 ? '<b>–°—Å—ã–ª–∫–∞:</b>' : ''}`, {
            parse_mode: 'HTML',
            reply_markup: adminKeyboard
        })
        if (ctx.session.file.length > 0) {
            await ctx.replyWithDocument(ctx.session.file)
        }
    }
}









bot.command('start', async (ctx) => {
     let l = ctx.msg.from.first_name
    const menuKeyboard = new InlineKeyboard()
    getOneUser(ctx.msg.from.id, async (err, row) => {
        if (row === undefined) {
            menuKeyboard.text('‚úÖ –ü–æ–Ω—è—Ç–Ω–æ, –Ω–∞—á–Ω—ë–º!', 'okey')
            sql = `INSERT INTO users(id_user, name) VALUES (?,?)`
            db.run(
                sql,
                [ctx.msg.from.id, ctx.msg.from.first_name],
                (err) => {
                    if (err) return console.error(err.message)
                }
            )
            getAllUsersCount(async (err, userb) => {
                await bot.api.sendMessage(adm_id_num, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="https://t.me/${ctx.msg.from.username}"><b>${ctx.msg.from.first_name}</b></a>\n–í–ø–µ—Ä–≤—ã–µ –∑–∞—à–µ–ª –≤ –±–æ—Ç–∞!\n\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>${userb[0].ap}</b>`, {
                    parse_mode: 'HTML',
                    disable_web_page_preview: true,
                })
            })
            await ctx.react("üòç")
            await ctx.replyWithPhoto(new InputFile("images/start.png"), {
                reply_markup: menuKeyboard,
                caption: `<b>–ü—Ä–∏–≤–µ—Ç, ${l}!</b>\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è, —á—Ç–æ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ —ç—Ç–æ–º –±–æ—Ç–µ ü´∂üèº\n\n–¢—É—Ç —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è —Å–≤–æ–∏—Ö reels –∏ –∏—Å—Ç–æ—Ä–∏–π, –Ω–æ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ö–∏—Ç—Ä–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ –≤ —Å—Ñ–µ—Ä–µ SMM!`,
                parse_mode: "HTML",
        
            })
        } else {
            menuKeyboard.text('‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'okey')
            await ctx.replyWithPhoto(new InputFile("images/start.png"), {
                reply_markup: menuKeyboard,
                caption: `<b>–ò —Å–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç, ${l}! ü´∂üèº</b>\n\n–¢—É—Ç —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è —Å–≤–æ–∏—Ö reels –∏ –∏—Å—Ç–æ—Ä–∏–π, –Ω–æ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ö–∏—Ç—Ä–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ –≤ —Å—Ñ–µ—Ä–µ SMM!`,
                parse_mode: "HTML",
        
            })
        }
    })
    

    
})
bot.command('help_adm', async (ctx) => {
    if (ctx.msg.from.id == adm_id_num) {
        await ctx.reply('<b>–¢–≤–æ–∏ –∫–æ–º–º–∞–Ω–¥—ã:</b>\n\n/post - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞\n/title - –Ω–∞–ø–∏—Å–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫\n/text - –Ω–∞–ø–∏—Å–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ\n/link_name - –Ω–∞–ø–∏—Å–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Å—ã–ª–∫–µ\n/link - –Ω–∞–ø–∏—Å–∞—Ç—å —Å—Å—ã–ª–∫—É\n/del - —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ª–∏–±–æ —É—Ä–æ–∫\n\n–î–æ–±–∞–≤–∏—Ç—å –≤ <b>–∫–∞—Ç–µ–≥–æ—Ä–∏—é</b> –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–º–µ–µ—Ç—Å—è:\n–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Ç–µ–∫—Å—Ç\n\n–î–æ–±–∞–≤–∏—Ç—å –≤ <b>—É—Ä–æ–∫</b> –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–º–µ–µ—Ç—Å—è:\n–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Ç–µ–∫—Å—Ç, (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª)\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å <b>—Ä–∞—Å—Å—ã–ª–∫—É</b> –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–º–µ–µ—Ç—Å—è:\n–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Ç–µ–∫—Å—Ç, –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Å—ã–ª–∫–∏, —Å—Å—ã–ª–∫–∞\n\n$ - –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏\n~ - –¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏\n\n(–î–ª—è –∂–∏—Ä–Ω–æ—Å—Ç–∏ –∏ –∏—Ç–∞–ª–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–∞–∫–∏–µ –∂–µ —Ç–µ–≥–∏ –∫–∞–∫ –∏ –≤ HTML)', {
            parse_mode: "HTML",

        })
    } else {
        await ctx.reply('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª(')
    }
})
bot.command('link_name', async (ctx) => {
    if (ctx.msg.from.id == adm_id_num) {
        ctx.session.link_name = 'true'
        await ctx.reply('–ñ–¥—É –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Å—ã–ª–∫–∏')
    } else {
        await ctx.reply('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª(')
    }
})
bot.command('link', async (ctx) => {
    if (ctx.msg.from.id == adm_id_num) {
        ctx.session.link = 'true'
        await ctx.reply('–ñ–¥—É —Å—Å—ã–ª–∫—É')
    } else {
        await ctx.reply('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª(')
    }
})
bot.command('text', async (ctx) => {
    if (ctx.msg.from.id == adm_id_num) {
        ctx.session.description = 'true'
        await ctx.reply('–ñ–¥—É –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞')
    } else {
        await ctx.reply('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª(')
    }
})
bot.command('title', async (ctx) => {
    if (ctx.msg.from.id == adm_id_num) {
        ctx.session.title = 'true'
        await ctx.reply('–ñ–¥—É –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞')
    } else {
        await ctx.reply('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª(')
    }
})
bot.command('post', async (ctx) => {
    if (ctx.msg.from.id == adm_id_num) {
        adminFunc(ctx)
    } else {
        await ctx.reply('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª(')
    }
})
bot.command('del', async (ctx) => {
    if (ctx.msg.from.id == adm_id_num) {
        const adminKeyboard = new InlineKeyboard().text('–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚ôªÔ∏è', 'del_category').row().text('–£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫ ‚ôªÔ∏è', 'del_lesson')
        await ctx.reply(`–ß—Ç–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑ —É–¥–∞–ª—è–µ–º? üëá`, {
            parse_mode: 'HTML',
            reply_markup: adminKeyboard
        })
    } else {
        await ctx.reply('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª(')
    }
})




bot.on(":document", async (ctx) => {
    if (ctx.msg.from.id == adm_id_num) {
        ctx.session.file = ctx.msg.document.file_id
        adminFunc(ctx)
    } else {
        await ctx.reply('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª(')
    }
})
bot.on(":photo", async (ctx) => {
    if (ctx.msg.from.id == adm_id_num) {
        ctx.session.photo = ctx.msg.photo[2].file_id
        console.log(ctx.msg.photo[2].file_id)
        adminFunc(ctx)
    } else {
        await ctx.reply('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª(')
    }
})
bot.on("message:text", async (ctx) => {
    if (ctx.msg.from.id == adm_id_num) {
        if (ctx.session.title === 'true') {
            ctx.session.title = ctx.message.text
            adminFunc(ctx)
        } else if (ctx.session.description === 'true') {
            ctx.session.description = ctx.message.text
            adminFunc(ctx)
        } else if (ctx.session.link_name === 'true') {
            ctx.session.link_name = ctx.message.text
            adminFunc(ctx)
        } else if (ctx.session.link === 'true') {
            ctx.session.link = ctx.message.text
            adminFunc(ctx)
        } else {
            await ctx.reply('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª(')
        }
    } else {
        await ctx.reply('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª(')
    }
})


bot.callbackQuery('admin_send', async (ctx) => {
    getAllUsers(async (err, rows) => {
        ctx.session.categories = []
        let sliderKeyboard = new InlineKeyboard()
        let i = 0
        const sendKeyboard = new InlineKeyboard().url(ctx.session.link_name, ctx.session.link)

        rows.forEach(async (item) => {
            await bot.api.sendPhoto(item.id_user, ctx.session.photo, {
                caption: `<b>${ctx.session.title}</b>\n\n${ctx.session.description.replace('$', '\n').replace('~', '\n\n')}`,
                parse_mode: 'HTML',

                reply_markup: sendKeyboard
            })
        });
        ctx.session.title = ''
        ctx.session.description = ''
        ctx.session.photo = ''
        ctx.session.category_id = ''
        ctx.session.file = ''
        ctx.session.link_name = ''
        ctx.session.link = ''
        await ctx.reply('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! üì®', {
        });
        ctx.answerCallbackQuery()

    })
})


bot.callbackQuery('del_category', async (ctx) => {
    getAllCategories(async (err, rows) => {
        ctx.session.categories = []
        let sliderKeyboard = new InlineKeyboard()
        let i = 0
        rows.forEach(item => {
            sliderKeyboard.text(`${item.title_category}`, `category_del_${i}`).row()
            ctx.session.categories.push(item.id)
            i++
        });
        await ctx.reply('–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å üëá\n\n<b>–ë–ï–ó –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø</b>', {
            reply_markup: sliderKeyboard,
            parse_mode: 'HTML',
        });
        ctx.answerCallbackQuery()
    })
})
bot.callbackQuery('del_lesson', async (ctx) => {
    getAllCategories(async (err, rows) => {
        ctx.session.categories = []
        let sliderKeyboard = new InlineKeyboard()
        let i = 0
        rows.forEach(item => {
            sliderKeyboard.text(`${item.title_category}`, `lesson_del_${i}`).row()
            ctx.session.categories.push(item.id)
            i++
        });
        await ctx.reply('–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üëá', {
            reply_markup: sliderKeyboard,
        });
        ctx.answerCallbackQuery()
    })
    // getAllLessons(async (err, rows) => {
    //     ctx.session.categories = []
    //     let sliderKeyboard = new InlineKeyboard()
    //     let i = 0
    //     rows.forEach(item => {
    //         sliderKeyboard.text(`${item.title_lesson}`, `lesson_del_${i}`).row()
    //         ctx.session.categories.push(item.id)
    //         i++
    //     });
    //     await ctx.reply('–í—ã–±–µ—Ä–∏ —É—Ä–æ–∫ üëá', {
    //         reply_markup: sliderKeyboard,
    //     });
    //     ctx.answerCallbackQuery()

    // })
})


for (let i = 0; i < 8; i++) {
    bot.callbackQuery(`lesson_del_${i}`, async (ctx) => {
        ctx.session.lessons = []
        id_category = ctx.session.categories[i]
        ctx.session.categories = []
        getAllCategories(async (err, rows) => {
            rows.forEach(item => {
                ctx.session.categories.push(item.id)
            });
        });
        getOneCategory(id_category, async (err, row) => {
            getAllLessonsByCategory(id_category, async (err, row_les) => {
                let sliderKeyboard = new InlineKeyboard()
                let i = 0
                row_les.forEach(item_les => {
                    sliderKeyboard.text(`${item_les.title_lesson}`, `lesson_del_opr_${i}`).row()
                    ctx.session.lessons.push(item_les.id)
                    i++
                });
                await ctx.reply(`–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —É—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å\n\n<b>–ë–ï–ó –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø</b>`, {
                    parse_mode: 'HTML',
                    reply_markup: sliderKeyboard
                })
                ctx.answerCallbackQuery()
            })
        })
    })
}


for (let j = 0; j < 8; j++) {
    bot.callbackQuery(`category_del_${j}`, async (ctx) => {
        id_category = ctx.session.categories[j]
        getOneCategory(id_category, async (err, row) => {
            sql = `DELETE FROM categories WHERE id = ?`
            db.run(
                sql,
                [id_category],
                (err) => {
                    if (err) return console.error(err.message)
                }
            )
            sql = `DELETE FROM lessons WHERE category_id = ?`
            db.run(
                sql,
                [id_category],
                (err) => {
                    if (err) return console.error(err.message)
                }
            )
            ctx.session.categories = []
            ctx.session.lessons = []
            await ctx.reply('–£–¥–∞–ª–µ–Ω–æ! ‚ôªÔ∏è')
            ctx.answerCallbackQuery()
        })
    })
}
for (let j = 0; j < 8; j++) {
    bot.callbackQuery(`lesson_del_opr_${j}`, async (ctx) => {
        id_category = ctx.session.lessons[j]
        console.log(j)
        getOneCategory(id_category, async (err, row) => {
            sql = `DELETE FROM lessons WHERE id = ?`
            db.run(
                sql,
                [id_category],
                (err) => {
                    if (err) return console.error(err.message)
                }
            )
            ctx.session.categories = []
            await ctx.reply('–£–¥–∞–ª–µ–Ω–æ! ‚ôªÔ∏è')
            ctx.answerCallbackQuery()
        })
    })
}


bot.callbackQuery('admin_lesson', async (ctx) => {
    getAllCategories(async (err, rows) => {
        ctx.session.categories = []
        let sliderKeyboard = new InlineKeyboard()
        let i = 0
        rows.forEach(item => {
            sliderKeyboard.text(`${item.title_category}`, `category_admin_${i}`).row()
            ctx.session.categories.push(item.id)
            i++
        });
        await ctx.reply('–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üëá', {
            reply_markup: sliderKeyboard,
        });
        ctx.answerCallbackQuery()

    })
})
for (let j = 0; j < 8; j++) {
    bot.callbackQuery(`category_admin_${j}`, async (ctx) => {
        id_category = ctx.session.categories[j]
        getOneCategory(id_category, async (err, row) => {
            sql = `INSERT INTO lessons(title_lesson, description, photo, category_id, file) VALUES (?,?,?,?,?)`
            db.run(
                sql,
                [ctx.session.title, ctx.session.description, ctx.session.photo, id_category, ctx.session.file],
                (err) => {
                    if (err) return console.error(err.message)
                }
            )
            ctx.session.categories = []
            ctx.session.title = ''
            ctx.session.description = ''
            ctx.session.photo = ''
            ctx.session.category_id = ''
            ctx.session.file = ''
            await ctx.reply('–î–æ–±–∞–≤–ª–µ–Ω–æ! ‚úÖ')
            ctx.answerCallbackQuery()
        })
    })
}

bot.callbackQuery('admin_clear', async (ctx) => {
    ctx.session.title = ''
    ctx.session.description = ''
    ctx.session.photo = ''
    ctx.session.category_id = ''
    ctx.session.file = ''
    ctx.session.link_name = ''
    ctx.session.link = ''
    await ctx.reply('–û—á–∏—â–µ–Ω–æ! ‚ôªÔ∏è')
    ctx.answerCallbackQuery()

})

bot.callbackQuery('admin_category', async (ctx) => {
    sql = `INSERT INTO categories(title_category, description, photo) VALUES (?,?,?)`
    db.run(
        sql,
        [ctx.session.title, ctx.session.description, ctx.session.photo],
        (err) => {
            if (err) return console.error(err.message)
        }
    )
    ctx.session.title = ''
    ctx.session.description = ''
    ctx.session.photo = ''
    ctx.session.category_id = ''
    ctx.session.file = ''
    await ctx.reply('–î–æ–±–∞–≤–ª–µ–Ω–æ! ‚úÖ')
    ctx.answerCallbackQuery()

})


bot.callbackQuery('okey', async (ctx) => {
    ctx.session.slideCount = 1

    let sliderKeyboard = new InlineKeyboard()
    getAllCategories(async (err, rows) => {
        ctx.session.categories = []
        let i = 0
        rows.forEach(item => {
            sliderKeyboard.text(`${item.title_category}`, `category_${i}`).row()
            ctx.session.categories.push(item.id)
            i++
        });
        const newMedia = InputMediaBuilder.photo(
            new InputFile(`images/start.png`), {
            caption: "<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—Å–µ —Ñ–∏—à–∫–∏ –¥–ª—è —Ç–≤–æ–∏—Ö –∏—Å—Ç–æ—Ä–∏–π –∏ reels —É–∂–µ —Ç—É—Ç üëáüèº",
            parse_mode: 'HTML'
        }
        );
        await ctx.editMessageMedia(newMedia, {
            reply_markup: sliderKeyboard,
        });
        ctx.answerCallbackQuery()

    })
})


for (let i = 0; i < 8; i++) {
    bot.callbackQuery(`category_${i}`, async (ctx) => {
        ctx.session.lessons = []
        id_category = ctx.session.categories[i]
        ctx.session.categories = []
        getAllCategories(async (err, rows) => {
            rows.forEach(item => {
                ctx.session.categories.push(item.id)
            });
        });
        getOneCategory(id_category, async (err, row) => {
            getAllLessonsByCategory(id_category, async (err, row_les) => {
                let sliderKeyboard = new InlineKeyboard()
                let i = 0
                row_les.forEach(item_les => {
                    sliderKeyboard.text(`${item_les.title_lesson}`, `lesson_${i}`).row()
                    ctx.session.lessons.push(item_les.id)
                    i++
                });

                const newMedia = InputMediaBuilder.photo(row.photo, {
                    caption: `<b>${row.title_category}</b>\n\n${row.description.replace('$', '\n').replace('~', '\n\n')}`,
                    parse_mode: 'HTML'
                }
                );
                sliderKeyboard.text(`‚óÄÔ∏è –ù–∞–∑–∞–¥`, `okey`).row()
                await ctx.editMessageMedia(newMedia, {
                    reply_markup: sliderKeyboard
                });
                ctx.answerCallbackQuery()
            })
        })
    })
}


for (let i = 0; i < 8; i++) {
    bot.callbackQuery(`lesson_${i}`, async (ctx) => {
        categories_sh = [...ctx.session.categories]
        id_lesson = ctx.session.lessons[i]
        getOneLesson(id_lesson, async (err, row) => {
            let sliderKeyboard = new InlineKeyboard()
            let i = 0
            if (row.file.length > 0) {
                await ctx.replyWithDocument(row.file)
            }
            const newMedia = InputMediaBuilder.photo(
                row.photo, {
                caption: `<b>${row.title_lesson}</b>\n\n${row.description.replace('$', '\n').replace('~', '\n\n')}`,
                parse_mode: 'HTML'
            })
            sliderKeyboard.text(`‚óÄÔ∏è –ù–∞–∑–∞–¥`, `category_${getKeyByValue(categories_sh, row.category_id)}`).row()
            await ctx.editMessageMedia(newMedia, {
                reply_markup: sliderKeyboard
            });
            ctx.answerCallbackQuery()
        })
    })
}



bot.start()